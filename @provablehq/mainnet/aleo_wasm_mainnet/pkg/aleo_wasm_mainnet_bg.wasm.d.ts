/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_plaintext_free: (a: number, b: number) => void;
export const plaintext_find: (a: number, b: number, c: number, d: number) => void;
export const plaintext_encrypt: (a: number, b: number, c: number, d: number) => void;
export const plaintext_encryptSymmetric: (a: number, b: number, c: number) => void;
export const plaintext_fromString: (a: number, b: number, c: number) => void;
export const plaintext_toJSON: (a: number, b: number) => void;
export const plaintext_fromBytesLe: (a: number, b: number) => void;
export const plaintext_toBytesLe: (a: number, b: number) => void;
export const plaintext_fromBitsLe: (a: number, b: number) => void;
export const plaintext_toBitsLe: (a: number) => number;
export const plaintext_fromFields: (a: number, b: number) => void;
export const plaintext_toFields: (a: number, b: number) => void;
export const plaintext_toString: (a: number, b: number) => void;
export const plaintext_plaintextType: (a: number, b: number) => void;
export const plaintext_toObject: (a: number, b: number) => void;
export const programmanager_executeFunctionOffline: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number) => number;
export const programmanager_buildExecutionTransaction: (a: number, b: number, c: number, d: number, e: number, f: number, g: bigint, h: bigint, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number) => number;
export const programmanager_estimateExecutionFee: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number) => number;
export const programmanager_estimateFinalizeFee: (a: number, b: number, c: number, d: number, e: number) => void;
export const __wbg_offlinequery_free: (a: number, b: number) => void;
export const offlinequery_new: (a: number, b: number, c: number, d: number) => void;
export const offlinequery_addBlockHeight: (a: number, b: number) => void;
export const offlinequery_addStatePath: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
export const offlinequery_toString: (a: number, b: number) => void;
export const offlinequery_fromString: (a: number, b: number, c: number) => void;
export const __wbg_field_free: (a: number, b: number) => void;
export const field_fromString: (a: number, b: number, c: number) => void;
export const field_toString: (a: number, b: number) => void;
export const field_fromBytesLe: (a: number, b: number) => void;
export const field_toBytesLe: (a: number, b: number) => void;
export const field_fromBitsLe: (a: number, b: number) => void;
export const field_toBitsLe: (a: number) => number;
export const field_toPlaintext: (a: number) => number;
export const field_clone: (a: number) => number;
export const field_random: () => number;
export const field_add: (a: number, b: number) => number;
export const field_subtract: (a: number, b: number) => number;
export const field_multiply: (a: number, b: number) => number;
export const field_divide: (a: number, b: number) => number;
export const field_pow: (a: number, b: number) => number;
export const field_inverse: (a: number) => number;
export const field_zero: () => number;
export const field_one: () => number;
export const field_double: (a: number) => number;
export const field_equals: (a: number, b: number) => number;
export const __wbg_foxfuture_free: (a: number, b: number) => void;
export const foxfuture_fromString: (a: number, b: number, c: number) => void;
export const foxfuture_toString: (a: number, b: number) => void;
export const foxfuture_toJSON: (a: number, b: number) => void;
export const __wbg_computekey_free: (a: number, b: number) => void;
export const computekey_from_private_key: (a: number) => number;
export const computekey_address: (a: number) => number;
export const computekey_sk_prf: (a: number) => number;
export const computekey_pk_sig: (a: number) => number;
export const computekey_pr_sig: (a: number) => number;
export const hashBHP256: (a: number, b: number, c: number) => void;
export const __wbg_keypair_free: (a: number, b: number) => void;
export const keypair_new: (a: number, b: number) => number;
export const keypair_provingKey: (a: number, b: number) => void;
export const keypair_verifyingKey: (a: number, b: number) => void;
export const __wbg_graphkey_free: (a: number, b: number) => void;
export const graphkey_from_view_key: (a: number) => number;
export const graphkey_from_string: (a: number, b: number) => number;
export const graphkey_to_string: (a: number, b: number) => void;
export const graphkey_sk_tag: (a: number) => number;
export const __wbg_bhp768_free: (a: number, b: number) => void;
export const bhp768_new: () => number;
export const bhp768_setup: (a: number, b: number, c: number) => void;
export const bhp768_hash: (a: number, b: number, c: number) => void;
export const bhp768_hashToGroup: (a: number, b: number, c: number) => void;
export const bhp768_commit: (a: number, b: number, c: number, d: number) => void;
export const bhp768_commitToGroup: (a: number, b: number, c: number, d: number) => void;
export const __wbg_pedersen64_free: (a: number, b: number) => void;
export const pedersen64_new: () => number;
export const pedersen64_setup: (a: number, b: number) => number;
export const pedersen64_hash: (a: number, b: number, c: number) => void;
export const pedersen64_commit: (a: number, b: number, c: number, d: number) => void;
export const pedersen64_commitToGroup: (a: number, b: number, c: number, d: number) => void;
export const __wbg_poseidon8_free: (a: number, b: number) => void;
export const poseidon8_new: () => number;
export const poseidon8_setup: (a: number, b: number, c: number) => void;
export const poseidon8_hash: (a: number, b: number, c: number) => void;
export const poseidon8_hashMany: (a: number, b: number, c: number, d: number) => void;
export const poseidon8_hashToScalar: (a: number, b: number, c: number) => void;
export const poseidon8_hashToGroup: (a: number, b: number, c: number) => void;
export const programmanager_buildJoinTransaction: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number) => number;
export const __wbg_metadata_free: (a: number, b: number) => void;
export const __wbg_get_metadata_name: (a: number, b: number) => void;
export const __wbg_set_metadata_name: (a: number, b: number, c: number) => void;
export const __wbg_get_metadata_locator: (a: number, b: number) => void;
export const __wbg_set_metadata_locator: (a: number, b: number, c: number) => void;
export const __wbg_get_metadata_prover: (a: number, b: number) => void;
export const __wbg_set_metadata_prover: (a: number, b: number, c: number) => void;
export const __wbg_get_metadata_verifier: (a: number, b: number) => void;
export const __wbg_set_metadata_verifier: (a: number, b: number, c: number) => void;
export const __wbg_get_metadata_verifyingKey: (a: number, b: number) => void;
export const __wbg_set_metadata_verifyingKey: (a: number, b: number, c: number) => void;
export const metadata_baseUrl: (a: number) => void;
export const metadata_bond_public: () => number;
export const metadata_bond_validator: () => number;
export const metadata_claim_unbond_public: () => number;
export const metadata_fee_private: () => number;
export const metadata_fee_public: () => number;
export const metadata_inclusion: () => number;
export const metadata_join: () => number;
export const metadata_set_validator_state: () => number;
export const metadata_split: () => number;
export const metadata_transfer_private: () => number;
export const metadata_transfer_private_to_public: () => number;
export const metadata_transfer_public: () => number;
export const metadata_transfer_public_as_signer: () => number;
export const metadata_transfer_public_to_private: () => number;
export const metadata_unbond_public: () => number;
export const __wbg_address_free: (a: number, b: number) => void;
export const address_from_private_key: (a: number) => number;
export const address_from_view_key: (a: number) => number;
export const address_from_compute_key: (a: number) => number;
export const address_fromBytesLe: (a: number, b: number) => void;
export const address_toBytesLe: (a: number, b: number) => void;
export const address_fromBitsLe: (a: number, b: number) => void;
export const address_toBitsLe: (a: number) => number;
export const address_fromFields: (a: number, b: number) => void;
export const address_toFields: (a: number, b: number) => void;
export const address_fromGroup: (a: number) => number;
export const address_toGroup: (a: number) => number;
export const address_from_string: (a: number, b: number) => number;
export const address_to_string: (a: number, b: number) => void;
export const address_toPlaintext: (a: number) => number;
export const address_verify: (a: number, b: number, c: number, d: number) => number;
export const __wbg_signature_free: (a: number, b: number) => void;
export const signature_sign: (a: number, b: number, c: number) => number;
export const signature_to_address: (a: number) => number;
export const signature_challenge: (a: number) => number;
export const signature_response: (a: number) => number;
export const signature_verify: (a: number, b: number, c: number, d: number) => number;
export const signature_fromBytesLe: (a: number, b: number) => void;
export const signature_toBytesLe: (a: number, b: number) => void;
export const signature_fromBitsLe: (a: number, b: number) => void;
export const signature_toBitsLe: (a: number) => number;
export const signature_toFields: (a: number, b: number) => void;
export const signature_from_string: (a: number, b: number) => number;
export const signature_to_string: (a: number, b: number) => void;
export const signature_toPlaintext: (a: number) => number;
export const signature_to_hex: (a: number, b: number) => void;
export const __wbg_viewkey_free: (a: number, b: number) => void;
export const viewkey_from_private_key: (a: number) => number;
export const viewkey_from_string: (a: number, b: number) => number;
export const viewkey_to_string: (a: number, b: number) => void;
export const viewkey_decrypt: (a: number, b: number, c: number, d: number) => void;
export const viewkey_skTag: (a: number, b: number) => void;
export const __wbg_transaction_free: (a: number, b: number) => void;
export const transaction_fromString: (a: number, b: number, c: number) => void;
export const transaction_fromBytesLe: (a: number, b: number) => void;
export const transaction_toString: (a: number, b: number) => void;
export const transaction_toBytesLe: (a: number, b: number) => void;
export const transaction_constainsSerialNumber: (a: number, b: number) => number;
export const transaction_constainsCommitment: (a: number, b: number) => number;
export const transaction_findRecord: (a: number, b: number) => number;
export const transaction_baseFeeAmount: (a: number) => bigint;
export const transaction_feeAmount: (a: number) => bigint;
export const transaction_priorityFeeAmount: (a: number) => bigint;
export const transaction_isDeploy: (a: number) => number;
export const transaction_isExecute: (a: number) => number;
export const transaction_isFee: (a: number) => number;
export const transaction_deployedProgram: (a: number) => number;
export const transaction_execution: (a: number) => number;
export const transaction_ownedRecords: (a: number, b: number) => number;
export const transaction_records: (a: number) => number;
export const transaction_summary: (a: number, b: number) => number;
export const transaction_id: (a: number, b: number) => void;
export const transaction_transactionType: (a: number, b: number) => void;
export const transaction_transitions: (a: number) => number;
export const transaction_verifyingKeys: (a: number) => number;
export const __wbg_transition_free: (a: number, b: number) => void;
export const transition_id: (a: number, b: number) => void;
export const transition_fromString: (a: number, b: number, c: number) => void;
export const transition_fromBytesLe: (a: number, b: number) => void;
export const transition_toString: (a: number, b: number) => void;
export const transition_toBytesLe: (a: number, b: number) => void;
export const transition_programId: (a: number, b: number) => void;
export const transition_functionName: (a: number, b: number) => void;
export const transition_containsCommitment: (a: number, b: number) => number;
export const transition_containsSerialNumber: (a: number, b: number) => number;
export const transition_findRecord: (a: number, b: number) => number;
export const transition_ownedRecords: (a: number, b: number) => number;
export const transition_records: (a: number) => number;
export const transition_inputs: (a: number, b: number) => number;
export const transition_outputs: (a: number, b: number) => number;
export const transition_tvk: (a: number, b: number) => number;
export const transition_tcm: (a: number) => number;
export const transition_scm: (a: number) => number;
export const __wbg_ciphertext_free: (a: number, b: number) => void;
export const ciphertext_decrypt: (a: number, b: number, c: number, d: number) => void;
export const ciphertext_decryptWithTransitionInfo: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
export const ciphertext_decryptWithTransitionViewKey: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
export const ciphertext_decryptSymmetric: (a: number, b: number, c: number) => void;
export const ciphertext_fromBytesLe: (a: number, b: number) => void;
export const ciphertext_fromBitsLe: (a: number, b: number) => void;
export const ciphertext_toBitsLe: (a: number) => number;
export const ciphertext_fromFields: (a: number, b: number) => void;
export const ciphertext_toFields: (a: number, b: number) => void;
export const ciphertext_fromString: (a: number, b: number, c: number) => void;
export const ciphertext_toBytes: (a: number, b: number) => void;
export const ciphertext_toString: (a: number, b: number) => void;
export const __wbg_execution_free: (a: number, b: number) => void;
export const execution_toString: (a: number, b: number) => void;
export const execution_fromString: (a: number, b: number, c: number) => void;
export const execution_globalStateRoot: (a: number, b: number) => void;
export const execution_proof: (a: number, b: number) => void;
export const execution_transitions: (a: number) => number;
export const verifyFunctionExecution: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
export const programmanager_buildSplitTransaction: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
export const __wbg_program_free: (a: number, b: number) => void;
export const program_fromString: (a: number, b: number, c: number) => void;
export const program_toString: (a: number, b: number) => void;
export const program_hasFunction: (a: number, b: number, c: number) => number;
export const program_getFunctions: (a: number) => number;
export const program_getFunctionInputs: (a: number, b: number, c: number, d: number) => void;
export const program_getMappings: (a: number, b: number) => void;
export const program_getRecordMembers: (a: number, b: number, c: number, d: number) => void;
export const program_getStructMembers: (a: number, b: number, c: number, d: number) => void;
export const program_matchRecordPlaintext: (a: number, b: number, c: number, d: number) => void;
export const program_getCreditsProgram: () => number;
export const program_id: (a: number, b: number) => void;
export const program_address: (a: number, b: number) => void;
export const program_isEqual: (a: number, b: number) => number;
export const program_getImports: (a: number) => number;
export const provingkey_isBondPublicProver: (a: number) => number;
export const provingkey_isBondValidatorProver: (a: number) => number;
export const provingkey_isClaimUnbondPublicProver: (a: number) => number;
export const provingkey_isFeePrivateProver: (a: number) => number;
export const provingkey_isFeePublicProver: (a: number) => number;
export const provingkey_isInclusionProver: (a: number) => number;
export const provingkey_isJoinProver: (a: number) => number;
export const provingkey_isSetValidatorStateProver: (a: number) => number;
export const provingkey_isSplitProver: (a: number) => number;
export const provingkey_isTransferPrivateProver: (a: number) => number;
export const provingkey_isTransferPrivateToPublicProver: (a: number) => number;
export const provingkey_isTransferPublicProver: (a: number) => number;
export const provingkey_isTransferPublicAsSignerProver: (a: number) => number;
export const provingkey_isTransferPublicToPrivateProver: (a: number) => number;
export const provingkey_isUnbondPublicProver: (a: number) => number;
export const __wbg_provingkey_free: (a: number, b: number) => void;
export const provingkey_checksum: (a: number, b: number) => void;
export const provingkey_copy: (a: number) => number;
export const provingkey_fromBytes: (a: number, b: number, c: number) => void;
export const provingkey_fromString: (a: number, b: number, c: number) => void;
export const provingkey_toBytes: (a: number, b: number) => void;
export const provingkey_toString: (a: number, b: number) => void;
export const __wbg_executionresponse_free: (a: number, b: number) => void;
export const executionresponse_getOutputs: (a: number) => number;
export const executionresponse_getExecution: (a: number) => number;
export const executionresponse_getKeys: (a: number, b: number) => void;
export const executionresponse_getProvingKey: (a: number) => number;
export const executionresponse_getVerifyingKey: (a: number) => number;
export const executionresponse_getFunctionId: (a: number, b: number) => void;
export const executionresponse_getProgram: (a: number) => number;
export const verifyingkey_bondPublicVerifier: () => number;
export const verifyingkey_bondValidatorVerifier: () => number;
export const verifyingkey_claimUnbondPublicVerifier: () => number;
export const verifyingkey_feePrivateVerifier: () => number;
export const verifyingkey_feePublicVerifier: () => number;
export const verifyingkey_inclusionVerifier: () => number;
export const verifyingkey_joinVerifier: () => number;
export const verifyingkey_setValidatorStateVerifier: () => number;
export const verifyingkey_splitVerifier: () => number;
export const verifyingkey_transferPrivateVerifier: () => number;
export const verifyingkey_transferPrivateToPublicVerifier: () => number;
export const verifyingkey_transferPublicVerifier: () => number;
export const verifyingkey_transferPublicAsSignerVerifier: () => number;
export const verifyingkey_transferPublicToPrivateVerifier: () => number;
export const verifyingkey_unbondPublicVerifier: () => number;
export const verifyingkey_isBondPublicVerifier: (a: number) => number;
export const verifyingkey_isBondValidatorVerifier: (a: number) => number;
export const verifyingkey_isClaimUnbondPublicVerifier: (a: number) => number;
export const verifyingkey_isFeePrivateVerifier: (a: number) => number;
export const verifyingkey_isFeePublicVerifier: (a: number) => number;
export const verifyingkey_isInclusionVerifier: (a: number) => number;
export const verifyingkey_isJoinVerifier: (a: number) => number;
export const verifyingkey_isSetValidatorStateVerifier: (a: number) => number;
export const verifyingkey_isSplitVerifier: (a: number) => number;
export const verifyingkey_isTransferPrivateVerifier: (a: number) => number;
export const verifyingkey_isTransferPrivateToPublicVerifier: (a: number) => number;
export const verifyingkey_isTransferPublicVerifier: (a: number) => number;
export const verifyingkey_isTransferPublicAsSignerVerifier: (a: number) => number;
export const verifyingkey_isTransferPublicToPrivateVerifier: (a: number) => number;
export const verifyingkey_isUnbondPublicVerifier: (a: number) => number;
export const __wbg_verifyingkey_free: (a: number, b: number) => void;
export const verifyingkey_checksum: (a: number, b: number) => void;
export const verifyingkey_copy: (a: number) => number;
export const verifyingkey_fromBytes: (a: number, b: number, c: number) => void;
export const verifyingkey_fromString: (a: number, b: number, c: number) => void;
export const verifyingkey_toBytes: (a: number, b: number) => void;
export const verifyingkey_toString: (a: number, b: number) => void;
export const __wbg_recordciphertext_free: (a: number, b: number) => void;
export const recordciphertext_fromString: (a: number, b: number, c: number) => void;
export const recordciphertext_toString: (a: number, b: number) => void;
export const recordciphertext_decrypt: (a: number, b: number, c: number) => void;
export const recordciphertext_isOwner: (a: number, b: number) => number;
export const recordciphertext_tag: (a: number, b: number, c: number) => void;
export const recordciphertext_fromBytesLe: (a: number, b: number) => void;
export const recordciphertext_toBytesLe: (a: number, b: number) => void;
export const recordciphertext_toBitsLe: (a: number) => number;
export const recordciphertext_toFields: (a: number, b: number) => void;
export const __wbg_recordplaintext_free: (a: number, b: number) => void;
export const recordplaintext_commitment: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
export const recordplaintext_fromString: (a: number, b: number, c: number) => void;
export const recordplaintext_getMember: (a: number, b: number, c: number, d: number) => void;
export const recordplaintext_owner: (a: number, b: number) => void;
export const recordplaintext_toJsObject: (a: number, b: number) => void;
export const recordplaintext_toString: (a: number, b: number) => void;
export const recordplaintext_fromBytesLe: (a: number, b: number) => void;
export const recordplaintext_toBytesLe: (a: number, b: number) => void;
export const recordplaintext_toBitsLe: (a: number) => number;
export const recordplaintext_toFields: (a: number, b: number) => void;
export const recordplaintext_microcredits: (a: number) => bigint;
export const recordplaintext_nonce: (a: number, b: number) => void;
export const recordplaintext_serialNumberString: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
export const recordplaintext_toJSON: (a: number, b: number) => void;
export const recordplaintext_foxTag: (a: number, b: number, c: number) => void;
export const recordplaintext_tag: (a: number, b: number, c: number, d: number) => void;
export const runRayonThread: (a: number) => void;
export const viewkey_to_scalar: (a: number) => number;
export const viewkey_clone: (a: number) => number;
export const transition_tpk: (a: number) => number;
export const viewkey_to_address: (a: number) => number;
export const ciphertext_toBytesLe: (a: number, b: number) => void;
export const __wbg_privatekey_free: (a: number, b: number) => void;
export const privatekey_new: () => number;
export const privatekey_from_seed_unchecked: (a: number, b: number) => number;
export const privatekey_from_string: (a: number, b: number, c: number) => void;
export const privatekey_to_string: (a: number, b: number) => void;
export const privatekey_to_view_key: (a: number) => number;
export const privatekey_to_address: (a: number) => number;
export const privatekey_sign: (a: number, b: number, c: number) => number;
export const privatekey_newEncrypted: (a: number, b: number, c: number) => void;
export const privatekey_toCiphertext: (a: number, b: number, c: number, d: number) => void;
export const privatekey_fromPrivateKeyCiphertext: (a: number, b: number, c: number, d: number) => void;
export const __wbg_privatekeyciphertext_free: (a: number, b: number) => void;
export const privatekeyciphertext_decryptToPrivateKey: (a: number, b: number, c: number, d: number) => void;
export const privatekeyciphertext_toString: (a: number, b: number) => void;
export const privatekeyciphertext_fromString: (a: number, b: number, c: number) => void;
export const __wbg_bhp512_free: (a: number, b: number) => void;
export const bhp512_new: () => number;
export const bhp512_setup: (a: number, b: number, c: number) => void;
export const bhp512_hash: (a: number, b: number, c: number) => void;
export const bhp512_hashToGroup: (a: number, b: number, c: number) => void;
export const bhp512_commit: (a: number, b: number, c: number, d: number) => void;
export const bhp512_commitToGroup: (a: number, b: number, c: number, d: number) => void;
export const __wbg_bhp1024_free: (a: number, b: number) => void;
export const bhp1024_new: () => number;
export const bhp1024_setup: (a: number, b: number, c: number) => void;
export const bhp1024_hash: (a: number, b: number, c: number) => void;
export const bhp1024_hashToGroup: (a: number, b: number, c: number) => void;
export const bhp1024_commit: (a: number, b: number, c: number, d: number) => void;
export const bhp1024_commitToGroup: (a: number, b: number, c: number, d: number) => void;
export const __wbg_programmanager_free: (a: number, b: number) => void;
export const programmanager_synthesizeKeyPair: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
export const privatekeyciphertext_encryptPrivateKey: (a: number, b: number, c: number, d: number) => void;
export const __wbg_bhp256_free: (a: number, b: number) => void;
export const bhp256_new: () => number;
export const bhp256_setup: (a: number, b: number, c: number) => void;
export const bhp256_hash: (a: number, b: number, c: number) => void;
export const bhp256_hashToGroup: (a: number, b: number, c: number) => void;
export const bhp256_commit: (a: number, b: number, c: number, d: number) => void;
export const bhp256_commitToGroup: (a: number, b: number, c: number, d: number) => void;
export const __wbg_pedersen128_free: (a: number, b: number) => void;
export const pedersen128_new: () => number;
export const pedersen128_setup: (a: number, b: number) => number;
export const pedersen128_hash: (a: number, b: number, c: number) => void;
export const pedersen128_commit: (a: number, b: number, c: number, d: number) => void;
export const pedersen128_commitToGroup: (a: number, b: number, c: number, d: number) => void;
export const __wbg_poseidon2_free: (a: number, b: number) => void;
export const poseidon2_new: () => number;
export const poseidon2_setup: (a: number, b: number, c: number) => void;
export const poseidon2_hash: (a: number, b: number, c: number) => void;
export const poseidon2_hashMany: (a: number, b: number, c: number, d: number) => void;
export const poseidon2_hashToScalar: (a: number, b: number, c: number) => void;
export const poseidon2_hashToGroup: (a: number, b: number, c: number) => void;
export const __wbg_poseidon4_free: (a: number, b: number) => void;
export const poseidon4_new: () => number;
export const poseidon4_setup: (a: number, b: number, c: number) => void;
export const poseidon4_hash: (a: number, b: number, c: number) => void;
export const poseidon4_hashMany: (a: number, b: number, c: number, d: number) => void;
export const poseidon4_hashToScalar: (a: number, b: number, c: number) => void;
export const poseidon4_hashToGroup: (a: number, b: number, c: number) => void;
export const programmanager_buildDeploymentTransaction: (a: number, b: number, c: number, d: bigint, e: bigint, f: number, g: number, h: number, i: number, j: number, k: number, l: number) => number;
export const programmanager_estimateDeploymentFee: (a: number, b: number, c: number) => number;
export const programmanager_estimateProgramNameCost: (a: number, b: number, c: number) => void;
export const programmanager_buildTransferTransaction: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number) => number;
export const __wbg_group_free: (a: number, b: number) => void;
export const group_fromString: (a: number, b: number, c: number) => void;
export const group_toString: (a: number, b: number) => void;
export const group_fromBytesLe: (a: number, b: number) => void;
export const group_toBytesLe: (a: number, b: number) => void;
export const group_fromBitsLe: (a: number, b: number) => void;
export const group_toBitsLe: (a: number) => number;
export const group_toFields: (a: number, b: number) => void;
export const group_toXCoordinate: (a: number) => number;
export const group_toPlaintext: (a: number) => number;
export const group_clone: (a: number) => number;
export const group_random: () => number;
export const group_add: (a: number, b: number) => number;
export const group_subtract: (a: number, b: number) => number;
export const group_scalarMultiply: (a: number, b: number) => number;
export const group_double: (a: number) => number;
export const group_inverse: (a: number) => number;
export const group_equals: (a: number, b: number) => number;
export const group_zero: () => number;
export const group_generator: () => number;
export const __wbg_scalar_free: (a: number, b: number) => void;
export const scalar_fromString: (a: number, b: number, c: number) => void;
export const scalar_toString: (a: number, b: number) => void;
export const scalar_fromBytesLe: (a: number, b: number) => void;
export const scalar_toBytesLe: (a: number, b: number) => void;
export const scalar_fromBitsLe: (a: number, b: number) => void;
export const scalar_toBitsLe: (a: number) => number;
export const scalar_toPlaintext: (a: number) => number;
export const scalar_clone: (a: number) => number;
export const scalar_random: () => number;
export const scalar_add: (a: number, b: number) => number;
export const scalar_subtract: (a: number, b: number) => number;
export const scalar_multiply: (a: number, b: number) => number;
export const scalar_divide: (a: number, b: number) => number;
export const scalar_double: (a: number) => number;
export const scalar_pow: (a: number, b: number) => number;
export const scalar_inverse: (a: number) => number;
export const scalar_one: () => number;
export const scalar_zero: () => number;
export const scalar_equals: (a: number, b: number) => number;
export const initThreadPool: (a: number, b: number) => number;
export const __wbindgen_export_0: (a: number) => void;
export const __wbindgen_export_1: (a: number, b: number, c: number) => void;
export const __wbindgen_export_2: (a: number, b: number) => number;
export const __wbindgen_export_3: (a: number, b: number, c: number, d: number) => number;
export const __wbindgen_export_4: WebAssembly.Table;
export const __wbindgen_add_to_stack_pointer: (a: number) => number;
export const __wbindgen_export_5: (a: number, b: number, c: number) => void;
export const __wbindgen_export_6: (a: number, b: number, c: number, d: number) => void;
